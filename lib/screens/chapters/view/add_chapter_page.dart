import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:get/get.dart';
import 'package:yokai_admin/Widgets/progressHud.dart';
import 'package:yokai_admin/utils/colors.dart';
import 'package:yokai_admin/utils/const.dart';

import '../../../Widgets/my_dropdown2.dart';
import '../../../Widgets/my_textfield.dart';
import '../../../Widgets/new_button.dart';
import '../../../api/database.dart';
import '../../../globalVariable.dart';
import '../../../utils/text_styles.dart';
import '../../stories/controller/stories_controller.dart';
import '../controller/chapters_controller.dart';

class AddNewChapter extends StatefulWidget {
  String storyName;
  String storyId;

  AddNewChapter({super.key, required this.storyName, required this.storyId});

  @override
  State<AddNewChapter> createState() => _AddNewChapterState();
}

class _AddNewChapterState extends State<AddNewChapter> {
  RxBool isLoading = false.obs;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    isLoading(true);
    print('storyName :: ${widget.storyName}');
    // StoriesController.getAllStory('').then((value) {
    for (int i = 0;
          i < (StoriesController.getAllStoriesBy.value.data?.length ?? 0);
          i++) {
        ChaptersController.storyList
            .add(StoriesController.getAllStoriesBy.value.data?[i].name ?? '');
        ChaptersController.storyId.add(
            StoriesController.getAllStoriesBy.value.data?[i].id.toString() ??
                '');
      }
    if (widget.storyId != '') {
      ChaptersController.storyIdString(widget.storyId);
    }
    if (widget.storyName != '') {
      ChaptersController.story(widget.storyName);
    }
    // fetchData();
    isLoading(false);
    // });
  }

  // fetchData() {
  //   if (ChaptersController.isEditDetails.isTrue) {
  //     ChaptersController.getAllChapterByChapterId(
  //             ChaptersController.chapterId.value)
  //         .then((value) {
  //       // ChaptersController.story = ChaptersController.getChapterByChapterId.value.data?.s.toString()??'';
  //       ChaptersController.story(ChaptersController
  //               .getChapterByChapterId.value.data?.storyName
  //               .toString() ??
  //           '');
  //       print('storystory :: ${ChaptersController.story}');
  //       ChaptersController.titleController.text=ChaptersController.getChapterByChapterId.value.data?.name.toString()??'';
  //       ChaptersController.storyIdString(ChaptersController.getChapterByChapterId.value.data?.storiesId.toString()??'');
  //       isLoading(false);
  //       setState(() {});
  //     });
  //   } else {
  //     ChaptersController.titleController.clear();
  //     ChaptersController.storyIdString('');
  //     ChaptersController.forStorySelect(false);
  //   }
  //   print('forStorySelect :: ${ChaptersController.forStorySelect}');
  // }

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;
    return Obx( () {
      return ProgressHUD(
        isLoading: isLoading.value,
        child: Scaffold(
          backgroundColor: AppColors.white,
          body: SingleChildScrollView(
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: screenWidth / 10),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      GestureDetector(
                        onTap: () {
                          ChaptersController.titleController.clear();
                          ChaptersController.uploadUrlPdfEng('');
                          ChaptersController.uploadUrlPdfJap('');
                          ChaptersController.chapterPage(0);
                        },
                        child: SvgPicture.asset('icons/back.svg',height: 35,width: 35,),),1.pw,
                      Text(
                        (ChaptersController.isEditDetails.isFalse)
                            ? 'New Chapters'
                            : 'Update Chapters',
                        style: AppTextStyle.normalBold28.copyWith(color: carlo500),
                      ),
                    ],
                  ),
                  4.ph,
                  Row(
                    children: [
                      // Expanded(
                      //   child: CustomInfoField(
                      //     controller: ChaptersController.autogeneratedController,
                      //     hint: "40",
                      //     label: 'Autogenerated Ch. No. ',
                      //   ),
                      // ),
                      // 2.pw,
                      if(isLoading.isFalse)
                      Expanded(
                        flex: 4,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Story',
                              style: AppTextStyle.normalRegular15
                                  .copyWith(color: labelColor),
                            ),
                            1.ph,
                            MyDropDownNew(
                              // enable: editEnabled ? true : false,
                              color: AppColors.white,
            
                              borderWidth: 1,
                              defaultValue:
                                  (ChaptersController.forStorySelect.isTrue)
                                      ? ChaptersController.getChapterByChapterId
                                              .value.data?.storyName
                                              .toString() ??
                                          ''.trim()
                                      : ChaptersController.story.value,
                              onChange: (value) async {
                                setState(() {
                                  // ChaptersController.story = value!;
                                  ChaptersController.story(value);
                                  ChaptersController.forStorySelect(false);
                                  int idIndex =
                                      ChaptersController.storyList.indexOf(value);
                                  ChaptersController.storyIdString(
                                      ChaptersController.storyId[idIndex - 1]);
                                  print(
                                      'idNumber :: ${ChaptersController.storyIdString.value}');
                                });
                                // await SubjectApi.showAllSubjectsByStandard(
                                //     context, selectedGrade);
                              },
                              array: ChaptersController.storyList,
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  4.ph,
                  CustomInfoField(
                    maxCharacters: 50,
                    maxLength: 50,
                    counter: true,
                    controller: ChaptersController.titleController,
                    hint: "The mystery deepens in wonderland",
                    label: 'Title',
                    onChanged: (value) {
                      ChaptersController.characterCountTitle(value.length);
                    },
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      Text(
                        '${ChaptersController.characterCountTitle.value} /50',
                        //textStyle.labelStyle,
                        style: textStyle.labelStyle.copyWith(
                            color:
                                ChaptersController.characterCountTitle.value <= 50
                                    ? textBlack
                                    : Colors.red,
                            fontSize: 12),
                      ),
                    ],
                  ),
                  4.ph,
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Chapter English*',
                            style: AppTextStyle.normalRegular15
                                .copyWith(color: labelColor),
                          ),
                          1.ph,
                          (ChaptersController.selectFileNameImageEng.isEmpty)
                              ? GestureDetector(
                            onTap: () {
                              ChaptersController.pickPdfEng().then((value) {
                                ChaptersController.uploadUrlPdfUrlEng('');
                                isLoading(true);
                                ChaptersController.uploadImageEnglish()
                                    .then((value) {
                                  customPrint(
                                      'imageUrl :: ${DatabaseApi.mainUrlForImage}${ChaptersController.uploadUrlPdfEng}');
                                  ChaptersController.uploadUrlPdfUrlEng(
                                      '${DatabaseApi.mainUrlForImage}${ChaptersController.uploadUrlPdfEng}');
                                  isLoading(false);
                                });
                              });
                            },
                            child: Container(
                              height: screenHeight * 0.1,
                              width: screenWidth / 5,
                              decoration: BoxDecoration(
                                color: containerBack,
                                borderRadius: BorderRadius.circular(12),
                                border: Border.all(color: arrow),
                              ),
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  SvgPicture.asset(
                                    'icons/add.svg',
                                    color: arrow,
                                  ),
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Text(
                                        'Click to upload ',
                                        style: AppTextStyle.normalRegular15
                                            .copyWith(color: labelColor),
                                      ),
                                      Text(
                                        'PDF FILE',
                                        style: AppTextStyle.normalBold16
                                            .copyWith(color: labelColor),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                                )
                              : Container(
                                  height: screenHeight * 0.1,
                                  width: screenWidth / 5,
                                  padding: EdgeInsets.all(10),
                                  decoration: BoxDecoration(
                                    color: containerBack,
                                    borderRadius: BorderRadius.circular(12),
                                    border: Border.all(color: arrow),
                                  ),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'Uploaded',
                                        style: AppTextStyle.normalRegular14
                                            .copyWith(color: labelColor),
                                      ),
                                      1.ph,
                                      Container(
                                        decoration: BoxDecoration(
                                          borderRadius: BorderRadius.circular(12),
                                          border: Border.all(
                                              width: 1, color: bordercolor),
                                          color: Color(0xffF5F6F6),
                                        ),
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Row(
                                            mainAxisAlignment:
                                                MainAxisAlignment.spaceBetween,
                                            children: [
                                              Text(
                                                ChaptersController
                                                            .selectFileNameImageEng
                                                            .value
                                                            .length >
                                                        20
                                                    ? '${ChaptersController.selectFileNameImageEng.value.substring(0, 15)}...'
                                                    : ChaptersController
                                                        .selectFileNameImageEng
                                                        .value,
                                                style: AppTextStyle
                                                    .normalRegular14
                                                    .copyWith(color: labelColor),
                                                overflow: TextOverflow.ellipsis,
                                              ),
                                              3.pw,
                                              InkWell(
                                                onTap: () {
                                                  print("Delete file");
                                                  setState(() {
                                                    ChaptersController
                                                        .selectFileNameImageEng(
                                                            '');
                                                  });
                                                  ChaptersController
                                                      .selectFileNameImageEng('');
                                                },
                                                child: Image.asset(
                                                  'icons/mi_delete.png',
                                                  height: 20,
                                                ),
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                          Text(
                            'Required',
                            style: AppTextStyle.normalRegular15
                                .copyWith(color: carlo500),
                          ),
                        ],
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Chapter in Japanese*   (DISABLED)',
                            style: AppTextStyle.normalRegular15
                                .copyWith(color: labelColor),
                          ),
                          1.ph,
                          (ChaptersController.selectFileNameImageJap.isEmpty)
                              ? GestureDetector(
                            onTap: () {
                              ChaptersController.pickPdfJap().then((value) {
                                ChaptersController.uploadUrlPdfUrlJap('');
                                isLoading(true);
                                ChaptersController.uploadImageJap().then((value) {
                                  customPrint(
                                      'imageUrl :: ${DatabaseApi.mainUrlForImage}${ChaptersController.uploadUrlPdfJap}');
                                  ChaptersController.uploadUrlPdfUrlJap(
                                      '${DatabaseApi.mainUrlForImage}${ChaptersController.uploadUrlPdfJap}');
                                  isLoading(false);
                                });
                              });
                            },
                            child: Container(
                              height: screenHeight * 0.1,
                              width: screenWidth / 5,
                              decoration: BoxDecoration(
                                color: containerBack,
                                borderRadius: BorderRadius.circular(12),
                                border: Border.all(color: arrow),
                              ),
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  SvgPicture.asset(
                                    'icons/add.svg',
                                    color: arrow,
                                  ),
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Text(
                                        'Click to upload ',
                                        style: AppTextStyle.normalRegular15
                                            .copyWith(color: labelColor),
                                      ),
                                      Text(
                                        'PDF FILE',
                                        style: AppTextStyle.normalBold16
                                            .copyWith(color: labelColor),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                                )
                              : Container(
                                  height: screenHeight * 0.1,
                                  width: screenWidth / 5,
                                  padding: EdgeInsets.all(10),
                                  decoration: BoxDecoration(
                                    color: containerBack,
                                    borderRadius: BorderRadius.circular(12),
                                    border: Border.all(color: arrow),
                                  ),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'Uploaded',
                                        style: AppTextStyle.normalRegular14
                                            .copyWith(color: labelColor),
                                      ),
                                      1.ph,
                                      Container(
                                        decoration: BoxDecoration(
                                          borderRadius: BorderRadius.circular(12),
                                          border: Border.all(
                                              width: 1, color: bordercolor),
                                          color: Color(0xffF5F6F6),
                                        ),
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Row(
                                            mainAxisAlignment:
                                                MainAxisAlignment.spaceBetween,
                                            children: [
                                              Text(
                                                ChaptersController
                                                            .selectFileNameImageJap
                                                            .value
                                                            .length >
                                                        20
                                                    ? '${ChaptersController.selectFileNameImageJap.value.substring(0, 25)}...'
                                                    : ChaptersController
                                                        .selectFileNameImageJap
                                                        .value,
                                                style: AppTextStyle
                                                    .normalRegular14
                                                    .copyWith(color: labelColor),
                                                overflow: TextOverflow.ellipsis,
                                              ),
                                              3.pw,
                                              InkWell(
                                                onTap: () {
                                                  print("Delete file");
                                                  setState(() {
                                                    ChaptersController
                                                        .selectFileNameImageJap(
                                                            '');
                                                  });
                                                  ChaptersController
                                                      .selectFileNameImageJap('');
                                                },
                                                child: Image.asset(
                                                  'icons/mi_delete.png',
                                                  height: 20,
                                                ),
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                        ],
                      ),
                    ],
                  ),
                  4.ph,
                  Center(
                    child: CustomButton(
                        text: 'Save Chapter',
                        textSize: 14,
                        width: screenWidth / 4,
                        onPressed: () {
                          isLoading(true);
                          final List<TextEditingController> controllerList = [
                            ChaptersController.titleController
                          ];
                          final List<String> fieldsName = [
                            'Title',
                          ];
                          bool valid = validateMyFields(
                              context, controllerList, fieldsName);
                          if (!valid) {
                            isLoading(false);
                            return;
                          }
                          customPrint(
                              'uploadUrlPdfEng :: ${ChaptersController.uploadUrlPdfEng.value}');
                          customPrint(
                              'uploadUrlPdfJap :: ${ChaptersController.uploadUrlPdfJap.value}');
                          final body = {
                            "stories_id": ChaptersController.storyIdString.value,
                            "name": ChaptersController.titleController.text,
                            if (ChaptersController.uploadUrlPdfEng.isNotEmpty)
                              "chapter_document_english":
                                ChaptersController.uploadUrlPdfEng.value,
                            if (ChaptersController.uploadUrlPdfJap.isNotEmpty)
                              "chapter_document_japanese":
                                ChaptersController.uploadUrlPdfJap.value
                          };
                          if (ChaptersController.isEditDetails.isFalse) {
                            customPrint('chapter :: create');
                            ChaptersController.createChapter(context, body)
                                .then((value) {
                              ChaptersController.storyNameSaveForDropDown(
                                  ChaptersController.story.value);
                              ChaptersController.storyIdSaveForDropDown(ChaptersController.storyIdString.value);
            
                              print('storyNameSaveForDropDown :: ${ChaptersController.storyNameSaveForDropDown.value}');
                              ChaptersController.titleController.clear();
                              ChaptersController.uploadUrlPdfEng('');
                              ChaptersController.uploadUrlPdfJap('');
                              ChaptersController.selectFileNameImageEng('');
                              ChaptersController.selectFileNameImageJap('');
                              ChaptersController.chapterPage(0);
                              // fetchDataForChapterList();
                              isLoading(false);
                            });
                          } else if (ChaptersController.isEditDetails.isTrue) {
                            customPrint('chapter :: update');
                            ChaptersController.updateChapter(context,
                                    ChaptersController.chapterId.value, body)
                                .then((value) {
                              ChaptersController.storyNameSaveForDropDown(
                                  ChaptersController.story.value);
                              ChaptersController.storyIdSaveForDropDown(ChaptersController.storyIdString.value);
            
                              print('storyNameSaveForDropDown :: ${ChaptersController.storyNameSaveForDropDown.value}');
                              ChaptersController.titleController.clear();
                              ChaptersController.chapterPage(0);
                              // fetchDataForChapterList();
                              isLoading(false);
                            });
                          }
                        }),
                  ),
                  1.ph,
                  Center(
                    child: Text(
                      'You can always edit the chapter in the future',
                      style: AppTextStyle.normalRegular15
                          .copyWith(color: labelColor),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      );
      }
    );
  }

  fetchDataForChapterList() async {
    isLoading(true);
    await StoriesController.getAllStory('').then((value) async {
      if ((StoriesController.getAllStoriesBy.value.data?.length ?? 0) > 0) {
        for (int i = 0;
        i < (StoriesController.getAllStoriesBy.value.data?.length ?? 0);
        i++) {
          ChaptersController.storyListChapter
              .add(StoriesController.getAllStoriesBy.value.data?[i].name ?? '');
          ChaptersController.storyIdChapter.add(
              StoriesController.getAllStoriesBy.value.data?[i].id.toString() ??
                  '');
        }
      }
      if (ChaptersController.storyNameSaveForDropDown.isNotEmpty &&
          ChaptersController.storyIdSaveForDropDown.isNotEmpty) {
        await ChaptersController.getAllChapterByStoryId(
            ChaptersController.storyIdSaveForDropDown.value, '')
            .then((value) {
          ChaptersController.storyChapter =
              ChaptersController.storyNameSaveForDropDown.value;
          customPrint(
              'storyListChapter :: ${ChaptersController.storyNameSaveForDropDown.value}');
          isLoading(false);
        });
      } else {
        if ((StoriesController.getAllStoriesBy.value.data?.length ?? 0) > 0) {
          await ChaptersController.getAllChapterByStoryId(
              ChaptersController.storyIdChapter[0],'')
              .then((value) {
            ChaptersController.storyChapter =
            ChaptersController.storyListChapter[1];
            customPrint('storyListChapter :: ${ChaptersController.storyChapter}');
            isLoading(false);
          });
        } else {
          isLoading(false);
        }
      }
    });
  }
}
