import 'dart:convert';
import 'dart:typed_data';

import 'package:file_picker/file_picker.dart';
import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;

import '../../../api/database.dart';
import '../../../api/local_storage.dart';
import '../../../globalVariable.dart';
import '../../../main.dart';
import '../../../model/get_chapter_by_chapter_id.dart';
import '../../../model/get_chapter_by_story_id.dart';
import '../../../utils/colors.dart';

class ChaptersController {
  // static RxString story = "Counting the stars until sunrise".obs;
  static RxString story = "Select".obs;
  static RxBool forStorySelect = false.obs;
  static String storyChapter = "Select";
  static RxString storyNameSaveForDropDown = ''.obs;
  static RxString storyIdSaveForDropDown = ''.obs;
  static RxString urlEnglishPdf = ''.obs;
  ///
  // static final RxList<String> storyList =
  //     RxList<String>.of(["Counting the stars until sunrise"]);
  static final RxList<String> storyList =
      RxList<String>.of(["Select"]);
  ///
  static final RxList<String> storyListChapter =
      RxList<String>.of(["Select"]);
  static final RxList<String> storyId = RxList<String>.of([]);
  static final RxList<String> storyIdChapter = RxList<String>.of([]);
  static final RxString storyIdString = ''.obs;
  static final RxString storyIdStringChapter = ''.obs;

  static String dateEdit = "Date";
  static final RxList<String> dateEditList = RxList<String>.of(["Date"]);
  static String chapter = "Chapter No.";
  static final RxList<String> chapterList = RxList<String>.of(["Chapter No."]);
  static String activity = "Activity";
  static final RxList<String> activityList = RxList<String>.of(["Activity"]);

  static RxBool isEdit = false.obs;
  static RxBool isEditDetails = false.obs;
  static RxInt chapterPage = 0.obs;
  static RxString chapterId = ''.obs;
  static RxInt characterCountTitle = 0.obs;
  static final TextEditingController searchChapterController = TextEditingController();

  static final TextEditingController autogeneratedController = TextEditingController();
  static final TextEditingController titleController = TextEditingController();


  // static RxBool loadingImage = false.obs;
  static Uint8List? _fileBytesImageEng;
  static String? _fileNameImageEng;
  static RxString uploadUrlPdfEng = ''.obs;
  static RxString uploadUrlPdfUrlEng = ''.obs;
  static RxString selectUrlPdfEng = ''.obs;
  static RxString selectFileNameImageEng = ''.obs;

  static Future<void> pickPdfEng() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['pdf'],
    );

    if (result != null) {
      // Handle the picked PDF file
      // setState(() {
      PlatformFile file = result.files.first;
      filePath = file.bytes;
      _fileBytesImageEng = result.files.single.bytes;
      _fileNameImageEng = result.files.single.name;
      selectUrlPdfEng("$_fileNameImageEng");
      uploadUrlPdfEng.value = _fileNameImageEng!;
      selectFileNameImageEng(file.name);

      // });
    } else {
      // Handle no PDF picked
      print('No PDF selected.');
    }
  }

  static Future<void> uploadImageEnglish() async {
    if (_fileBytesImageEng == null) {
      return;
    }
    // isLoading(true);
    final url = Uri.parse(DatabaseApi.uploadDocument);

    try {
      var request = http.MultipartRequest('POST', url);
      request.files.add(
        http.MultipartFile.fromBytes(
          'images',
          _fileBytesImageEng!,
          filename: _fileNameImageEng!,
        ),
      );
      customPrint("BITES ${_fileBytesImageEng!.buffer.lengthInBytes}");
      // isLoading(true);
      var response = await request.send();

      if (response.statusCode == 200) {
        var responseBody = await response.stream.bytesToString();
        final jsonData = json.decode(responseBody);
        uploadUrlPdfEng('');
        uploadUrlPdfEng(jsonData['image_urls']
            .toString()
            .replaceAll('[', '')
            .replaceAll(']', '')
            .replaceAll("{", '')
            .replaceAll("}", '')
            .replaceAll("url:", '').replaceAll(" /", ''));
        // isLoading(false);
        customPrint('images uploaded successfully!  ${responseBody}');
        customPrint('images uploaded successfully  ${uploadUrlPdfEng.value}');
        // isLoading(false);
        showSuccessSnackBar('icons/check.svg', 'File uploaded successfully!');
      } else {
        customPrint(
            'Failed to upload file. Status code: ${response.statusCode}');
      }
    } catch (e) {
      customPrint('Error uploading file: $e');
    }
  }

  ///japanese
  static Uint8List? _fileBytesImageJap;
  static String? _fileNameImageJap;
  static RxString uploadUrlPdfJap = ''.obs;
  static RxString uploadUrlPdfUrlJap = ''.obs;
  static RxString selectUrlPdfJap = ''.obs;
  static RxString selectFileNameImageJap = ''.obs;

  static Future<void> pickPdfJap() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['pdf'],
    );

    if (result != null) {
      // Handle the picked PDF file
      // setState(() {
      PlatformFile file = result.files.first;
      filePath = file.bytes;
      _fileBytesImageJap = result.files.single.bytes;
      _fileNameImageJap = result.files.single.name;
      selectUrlPdfJap("$_fileNameImageJap");
      uploadUrlPdfJap.value = _fileNameImageJap!;
      selectFileNameImageJap(file.name);

      // });
    } else {
      // Handle no PDF picked
      print('No PDF selected.');
    }
  }

  static Future<void> uploadImageJap() async {
    if (_fileBytesImageJap == null) {
      return;
    }
    // isLoading(true);
    final url = Uri.parse(DatabaseApi.uploadDocument);

    try {
      var request = http.MultipartRequest('POST', url);
      request.files.add(
        http.MultipartFile.fromBytes(
          'images',
          _fileBytesImageJap!,
          filename: _fileNameImageJap!,
        ),
      );
      customPrint("BITES ${_fileBytesImageJap!.buffer.lengthInBytes}");
      // isLoading(true);
      var response = await request.send();

      if (response.statusCode == 200) {
        var responseBody = await response.stream.bytesToString();
        final jsonData = json.decode(responseBody);
        uploadUrlPdfJap('');
        uploadUrlPdfJap(jsonData['image_urls']
            .toString()
            .replaceAll('[', '')
            .replaceAll(']', '')
            .replaceAll("{", '')
            .replaceAll("}", '')
            .replaceAll("url:", '').replaceAll(" /", ''));
        // isLoading(false);
        customPrint('images uploaded successfully!  ${responseBody}');
        customPrint('images uploaded successfully  ${uploadUrlPdfJap.value}');
        // isLoading(false);
        showSuccessSnackBar('icons/check.svg', 'File uploaded successfully!');
      } else {
        customPrint(
            'Failed to upload file. Status code: ${response.statusCode}');
      }
    } catch (e) {
      customPrint('Error uploading file: $e');
    }
  }

  static Future<bool> createChapter(context, body) async {
    final String url = "${DatabaseApi.createChapter}";
    customPrint("createChapter url:: $url");
    customPrint("createChapter body:: ${jsonEncode(body)}");

    final headers = {
      "Content-Type": "application/json",
      "AdminToken": "${prefs?.getString(LocalStorage.token)}",
    };
    try {
      return await http
          .post(Uri.parse(url), headers: headers, body: json.encode(body))
          .then((value) async {
        final jsonData = json.decode(value.body);
        print("createChapter response:: ${jsonEncode(jsonData)}");
        if (value.statusCode != 200) {
          showErrorSnackBar(jsonData["message"].toString(), colorError);
          return false;
        } else if (jsonData["status"] == "false") {
          // showSnackbar(jsonData["message"].toString(), colorError);
          showErrorSnackBar(jsonData["message"].toString(), colorError);
          return false;
        }
// getbackTestingStock(getBackTestingStockFromJson(value.body));

        // showSnackbar(jsonData["message"].toString(), colorSuccess);
        showSuccessSnackBarIcon(jsonData["message"].toString(), colorSuccess);
        return true;
      });
    } on Exception catch (e) {
      customPrint("Error :: $e");
// showSnackbar(context,
// "Some unknown error has occur, try again after some time", colorRed);
      return false;
    }
  }

  static Future<bool> updateChapter(context, String chapterId, body) async {
    final String url = "${DatabaseApi.updateChapter}$chapterId";
    customPrint("updateChapter url:: $url");
    customPrint("updateChapter body:: ${jsonEncode(body)}");

    final headers = {
      "Content-Type": "application/json",
      "AdminToken": "${prefs?.getString(LocalStorage.token)}",
    };
    try {
      return await http
          .put(Uri.parse(url), headers: headers, body: json.encode(body))
          .then((value) async {
        final jsonData = json.decode(value.body);
        print("updateChapter response:: ${jsonEncode(jsonData)}");
        if (value.statusCode != 200) {
          showErrorSnackBar(jsonData["message"].toString(), colorError);
          return false;
        } else if (jsonData["status"] == "false") {
          showErrorSnackBar(jsonData["message"].toString(), colorError);
          return false;
        }
// getbackTestingStock(getBackTestingStockFromJson(value.body));

        showSuccessSnackBarIcon(jsonData["message"].toString(), colorSuccess);
        return true;
      });
    } on Exception catch (e) {
      customPrint("Error :: $e");
// showSnackbar(context,
// "Some unknown error has occur, try again after some time", colorRed);
      return false;
    }
  }

  static Rx<GetChapterByStoryId> getChapterByStoryId =
      GetChapterByStoryId().obs;

  static Future<bool> getAllChapterByStoryId(String storyId,String search) async {
    final headers = {
      "Content-Type": "application/json",
      "UserToken": '${prefs?.getString(LocalStorage.token).toString()}'
    };
    final String url = "${DatabaseApi.getAllChapterByStoryId}?stories_id=$storyId&search=$search";
    customPrint("getAllChapterByStoryId url :: $url");
    try {
      return await http
          .get(Uri.parse(url), headers: headers)
          .then((value) async {
        print("getAllChapterByStoryId :: ${value.body}");
        final jsonData = jsonDecode(value.body);
        if (jsonData["status"].toString() != "true") {
          showErrorSnackBar(jsonData["message"].toString(), colorError);
          return false;
        }
        //showSnackbar("Subscription PlanPrice Details Added Successfully", colorSuccess);
        getChapterByStoryId(getChapterByStoryIdFromJson(value.body));
        return true;
      });
    } on Exception catch (e) {
      print("getAllChapterByStoryId:: $e");
      // showSnackbar("Some unknown error has occur, try again after some time!", colorError);
      return false;
    }
  }

  static Rx<GetChapterByChapterId> getChapterByChapterId =
      GetChapterByChapterId().obs;

  static Future<bool> getAllChapterByChapterId(String chapterId) async {
    final headers = {
      "Content-Type": "application/json",
      "UserToken": '${prefs?.getString(LocalStorage.token).toString()}'
    };
    final String url = '${DatabaseApi.getAllChapterByChapterId}$chapterId';
    customPrint("getAllChapterByChapterId url :: $url");
    try {
      return await http
          .get(Uri.parse(url), headers: headers)
          .then((value) async {
        print("getAllChapterByChapterId :: ${value.body}");
        final jsonData = jsonDecode(value.body);
        if (jsonData["status"].toString() != "true") {
          showErrorSnackBar(jsonData["message"].toString(), colorError);
          return false;
        }
        //showSnackbar("Subscription PlanPrice Details Added Successfully", colorSuccess);
        getChapterByChapterId(getChapterByChapterIdFromJson(value.body));
        return true;
      });
    } on Exception catch (e) {
      print("getAllChapterByChapterId:: $e");
      // showSnackbar("Some unknown error has occur, try again after some time!", colorError);
      return false;
    }
  }

  static Future<bool> deleteChapter(
      BuildContext context, String chapterId) async {
    final headers = {
      "Content-Type": "application/json",
      "AdminToken": '${prefs?.getString(LocalStorage.token).toString()}'
    };
    String url = "${DatabaseApi.deleteChapterByChapterId}$chapterId";
    customPrint("deleteChapter URL :: $url");
    try {
      return await http.delete(Uri.parse(url), headers: headers).then((value) {
        customPrint("deleteChapter :: ${value.body}");
        final jsonData = jsonDecode(value.body);
        if (value.statusCode != 200) {
          showErrorSnackBar(jsonData["message"].toString(), colorError);
          return false;
        }
        showSuccessSnackBarIcon(jsonData["message"].toString(), colorSuccess);
        return true;
      });
    } on Exception catch (e) {
      customPrint("deleteChapter  :: $e");
      showErrorSnackBar("delete ", colorError);
      return false;
    }
  }
}